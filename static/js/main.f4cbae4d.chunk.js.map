{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Calculator","state","count","_this2","this","_parseState","f","counts","i","result","forEach","value","index","push","parseState","props","_parseState2","Object","slicedToArray","price","sumCount","reduce","prev","_ref4","_ref5","react_default","a","createElement","className","type","min","max","step","onChange","e","setState","currentTarget","toFixed","map","_ref6","_ref7","numToBuy","key","PureComponent","SAMPLE_PRICING_1","4","6","10","20","App","pricing","onPriceChange","_this3","objectSpread","defineProperty","_this4","pricingList","_","maxCount","minPrice","Infinity","decision","prevState","j","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref3","_ref2","err","return","calculateOptimal","_ref8","_ref9","App_Calculator","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f4cbae4d.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport * as _ from \"lodash\";\nimport \"./App.css\";\n\ntype DPStates = [number, number, number][];\n\nfunction calculateOptimal(pricing: [number, number][], maxCount: number) {\n  const f: DPStates = [[0, 0, 0]];\n  for (let i = 1; i <= maxCount; i++) {\n    let minPrice = Infinity;\n    let decision = 0;\n    let prevState = 0;\n\n    for (let j = 0; j < i; j++) {\n      for (const [count, price] of pricing) {\n        if (i - j <= count && f[j][0] + price < minPrice) {\n          prevState = j;\n          decision = count;\n          minPrice = f[j][0] + price;\n        }\n      }\n    }\n\n    f[i] = [minPrice, decision, prevState];\n  }\n\n  return f;\n}\n\nfunction parseState(f: DPStates, count: number): [number, [number, number][]] {\n  const counts: number[] = [];\n  let i = count;\n  while (i > 0) {\n    counts[f[i][1]] = (counts[f[i][1]] || 0) + 1;\n    i = f[i][2];\n  }\n\n  const result: [number, number][] = [];\n  counts.forEach((value, index) => result.push([index, value]));\n  return [f[count][0], result];\n}\n\ninterface CalculatorProps {\n  f: DPStates;\n}\n\ninterface CalculatorState {\n  count: number;\n}\n\nclass Calculator extends PureComponent<CalculatorProps, CalculatorState> {\n  state = {\n    count: 10\n  };\n\n  render() {\n    const [price, counts] = parseState(this.props.f, this.state.count);\n    let sumCount = counts.reduce((prev, [cnt, num]) => prev + cnt * num, 0);\n\n    return (\n      <div>\n        <input\n          className=\"count-slider\"\n          type=\"range\"\n          min=\"1\"\n          max=\"40\"\n          value={this.state.count}\n          step=\"1\"\n          onChange={e => this.setState({ count: +e.currentTarget.value })}\n        />\n        <p>\n          You need <em>${price.toFixed(2)}</em> for {this.state.count} nuggets:\n        </p>\n        <ul>\n          {counts.map(([count, numToBuy]) => (\n            <li key={count}>\n              {count} nuggests x {numToBuy}\n            </li>\n          ))}\n        </ul>\n        <p>You will get {sumCount} nuggets.</p>\n      </div>\n    );\n  }\n}\n\ninterface AppState {\n  pricing: { [count: number]: number };\n}\n\nconst SAMPLE_PRICING_1 = {\n  4: 1.29,\n  6: 3.69,\n  10: 4.79,\n  20: 5\n};\n\nexport default class App extends PureComponent<{}, AppState> {\n  state = { pricing: SAMPLE_PRICING_1 };\n\n  onPriceChange = (count: number) => (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    this.setState({\n      pricing: {\n        ...this.state.pricing,\n        [count]: +e.currentTarget.value\n      }\n    });\n  };\n\n  render() {\n    const pricingList: [number, number][] = [];\n    _.forEach(this.state.pricing, (price, count) =>\n      pricingList.push([+count, price])\n    );\n    const f = calculateOptimal(pricingList, 40);\n    return (\n      <div>\n        <h2>Step 1: Enter Menu Prices</h2>\n        <ul className=\"pricing-list\">\n          {pricingList.map(([count, price]) => (\n            <li key={count}>\n              <div className=\"count\">{count} nuggets</div>\n              <div className=\"price\">\n                $\n                <input\n                  value={price}\n                  type=\"number\"\n                  onChange={this.onPriceChange(count)}\n                />\n              </div>\n              <div className=\"unit-price\">\n                (${(price / count).toFixed(2)} ea)\n              </div>\n            </li>\n          ))}\n        </ul>\n        <h2>Step 2: Enjoy</h2>\n        <Calculator f={f} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}